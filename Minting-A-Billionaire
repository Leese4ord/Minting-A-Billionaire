import os
import json
import sys
import time
import threading
import subprocess
import logging
from flask import Flask, jsonify
import alpaca_trade_api as tradeapi
from datetime import datetime
import pytz
from email.mime.text import MIMEText
import smtplib
import numpy as np
import cirq
import tensorflow as tf

# Set up logging
logging.basicConfig(filename='trading.log', level=logging.INFO, format='%(asctime)s - %(message)s')

# Load secrets
with open("config.json", "r") as file:
    config = json.load(file)

API_KEY = config["api_key"]
API_SECRET = config["api_secret"]
BASE_URL = config["base_url"]
WATCHLIST = config["watchlist"]
DIVIDEND_STOCKS = config["dividend_stocks"]

# Alpaca API setup
api = tradeapi.REST(API_KEY, API_SECRET, BASE_URL, api_version='v2')

app = Flask(__name__)

# Global constants
TIMEZONE = "America/Chicago"
os.environ['TZ'] = TIMEZONE
pytz.timezone(TIMEZONE)

# Find stocks under $5 and under 10 million in float
def find_low_price_low_float_stocks():
    stock_data = [
        {"ticker": "ABC", "price": 4.5, "float": 9_000_000},
        {"ticker": "DEF", "price": 6.0, "float": 12_000_000},
        {"ticker": "GHI", "price": 3.0, "float": 8_000_000}
    ]

    filtered_stocks = [
        stock for stock in stock_data
        if stock["price"] < 5 and stock["float"] < 10_000_000
    ]

    return [stock["ticker"] for stock in filtered_stocks]

# Function to send SMS notifications
def send_sms(subject, message):
    phone_number = "3344190321@vtext.com"  # Replace with appropriate SMS gateway for the intended carrier
    smtp_server = "smtp.gmail.com"
    smtp_port = 587

    email = config["EMAIL"]
    email_password = config["EMAIL_PASSWORD"]
    msg = MIMEText(message)
    msg['From'] = email
    msg['To'] = phone_number
    msg['Subject'] = subject

    try:
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(email, email_password)
            server.send_message(msg)
        logging.info(f"SMS notification sent: {message}")
    except Exception as e:
        logging.error(f"Failed to send SMS notification: {e}")

# Fetch stock data
def get_stock_data(symbol):
    try:
        barset = api.get_barset(symbol, 'day', limit=1)
        bars = barset[symbol]
        if bars:
            return bars[0].c  # Closing price
    except Exception as e:
        logging.error(f"Error fetching data for {symbol}: {e}")
    return None

# Place a trade order
def place_order(symbol, qty, side):
    try:
        api.submit_order(
            symbol=symbol,
            qty=qty,
            side=side,
            type='market',
            time_in_force='gtc'
        )
        logging.info(f"Order placed: {side} {qty} shares of {symbol}")
        send_sms("Order Alert", f"{side} {qty} shares of {symbol}")
    except Exception as e:
        logging.error(f"Error placing order for {symbol}: {e}")

# Main trading logic
def trading_algorithm():
    for stock in WATCHLIST:
        price = get_stock_data(stock)
        if price:
            if price < 100:
                place_order(stock, 1, 'buy')
            elif price > 200:
                place_order(stock, 1, 'sell')

# Monitor dividend stocks
def manage_dividend_stocks():
    for stock in DIVIDEND_STOCKS:
        price = get_stock_data(stock)
        if price:
            logging.info(f"Monitoring dividend stock {stock} at price {price}")

@app.route("/")
def home():
    return "Welcome to CashUpgrade!"

@app.route("/watchlist")
def get_watchlist():
    return jsonify({
        "dividend": config.get("dividend_stocks", []),
        "crypto": config.get("crypto_watchlist", []),
        "stocks": WATCHLIST
    })

# Main loop
if __name__ == "__main__":
    logging.info("Started trading algorithm...")
    while True:
        try:
            trading_algorithm()
            manage_dividend_stocks()
            time.sleep(86400)  # Run daily
        except Exception as e:
            logging.error(f"Error in main loop: {e}")
            send_sms("Error Alert", str(e))

    # Add uwsgi configuration for deployment
    # The directory where your app is located
    os.chdir('/home/Leese4ord/CashUpgrade')

    # The WSGI file to run (replace with the actual path if needed)
    https://www.pythonanywhere.com/user/Leese4ord/files/var/www/leese4ord_pythonanywhere_com_wsgi.py?

    # The virtualenv path
    virtualenv = '/home/Leese4ord/.virtualenvs/myenv'

    # The Python version to use
    pythonpath = '/home/Leese4ord'

    # The socket file to use
    socket = '/var/sockets/leese4ord.pythonanywhere.com/socket'

    # Enable master process for better management
    master = True

    # Number of workers (adjust based on your app's needs)
    workers = 4

    # Log file location for debugging
    logto = '/home/Leese4ord/uwsgi.log'

    # Harakiri (timeout for workers)
    harakiri = 60

    # Enable uWSGI to serve static files (if needed)
    static-map = '/static=/home/Leese4ord/static'
